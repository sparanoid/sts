/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-sqlite";
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";

export const incidents_updates = sqliteTable(
  "incidents_updates",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    type: text("type", {
      enum: ["investigating", "identified", "monitoring", "update", "resolved"],
    })
      .notNull()
      .default("investigating"),
    content: text("content", { mode: "json" }).notNull(),
    timestamp: text("timestamp")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index("incidents_updates_order_idx").on(columns._order),
    index("incidents_updates_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [incidents.id],
      name: "incidents_updates_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const incidents = sqliteTable(
  "incidents",
  {
    id: integer("id").primaryKey(),
    title: text("title").notNull(),
    description: text("description").notNull(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index("incidents_updated_at_idx").on(columns.updatedAt),
    index("incidents_created_at_idx").on(columns.createdAt),
  ],
);

export const users_sessions = sqliteTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: text("id").primaryKey(),
    createdAt: text("created_at").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    expiresAt: text("expires_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index("users_sessions_order_idx").on(columns._order),
    index("users_sessions_parent_id_idx").on(columns._parentID),
    foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  ],
);

export const users = sqliteTable(
  "users",
  {
    id: integer("id").primaryKey(),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text("email").notNull(),
    resetPasswordToken: text("reset_password_token"),
    resetPasswordExpiration: text("reset_password_expiration").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text("salt"),
    hash: text("hash"),
    loginAttempts: numeric("login_attempts", { mode: "number" }).default("0"),
    lockUntil: text("lock_until").default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
  },
  (columns) => [
    index("users_updated_at_idx").on(columns.updatedAt),
    index("users_created_at_idx").on(columns.createdAt),
    uniqueIndex("users_email_idx").on(columns.email),
  ],
);

export const payload_locked_documents = sqliteTable(
  "payload_locked_documents",
  {
    id: integer("id").primaryKey(),
    globalSlug: text("global_slug"),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index("payload_locked_documents_global_slug_idx").on(columns.globalSlug),
    index("payload_locked_documents_updated_at_idx").on(columns.updatedAt),
    index("payload_locked_documents_created_at_idx").on(columns.createdAt),
  ],
);

export const payload_locked_documents_rels = sqliteTable(
  "payload_locked_documents_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    incidentsID: integer("incidents_id"),
    usersID: integer("users_id"),
  },
  (columns) => [
    index("payload_locked_documents_rels_order_idx").on(columns.order),
    index("payload_locked_documents_rels_parent_idx").on(columns.parent),
    index("payload_locked_documents_rels_path_idx").on(columns.path),
    index("payload_locked_documents_rels_incidents_id_idx").on(
      columns.incidentsID,
    ),
    index("payload_locked_documents_rels_users_id_idx").on(columns.usersID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["incidentsID"]],
      foreignColumns: [incidents.id],
      name: "payload_locked_documents_rels_incidents_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
  ],
);

export const payload_preferences = sqliteTable(
  "payload_preferences",
  {
    id: integer("id").primaryKey(),
    key: text("key"),
    value: text("value", { mode: "json" }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index("payload_preferences_key_idx").on(columns.key),
    index("payload_preferences_updated_at_idx").on(columns.updatedAt),
    index("payload_preferences_created_at_idx").on(columns.createdAt),
  ],
);

export const payload_preferences_rels = sqliteTable(
  "payload_preferences_rels",
  {
    id: integer("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: text("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => [
    index("payload_preferences_rels_order_idx").on(columns.order),
    index("payload_preferences_rels_parent_idx").on(columns.parent),
    index("payload_preferences_rels_path_idx").on(columns.path),
    index("payload_preferences_rels_users_id_idx").on(columns.usersID),
    foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  ],
);

export const payload_migrations = sqliteTable(
  "payload_migrations",
  {
    id: integer("id").primaryKey(),
    name: text("name"),
    batch: numeric("batch", { mode: "number" }),
    updatedAt: text("updated_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text("created_at")
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index("payload_migrations_updated_at_idx").on(columns.updatedAt),
    index("payload_migrations_created_at_idx").on(columns.createdAt),
  ],
);

export const relations_incidents_updates = relations(
  incidents_updates,
  ({ one }) => ({
    _parentID: one(incidents, {
      fields: [incidents_updates._parentID],
      references: [incidents.id],
      relationName: "updates",
    }),
  }),
);
export const relations_incidents = relations(incidents, ({ many }) => ({
  updates: many(incidents_updates, {
    relationName: "updates",
  }),
}));
export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    incidentsID: one(incidents, {
      fields: [payload_locked_documents_rels.incidentsID],
      references: [incidents.id],
      relationName: "incidents",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  incidents_updates: typeof incidents_updates;
  incidents: typeof incidents;
  users_sessions: typeof users_sessions;
  users: typeof users;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_incidents_updates: typeof relations_incidents_updates;
  relations_incidents: typeof relations_incidents;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-sqlite" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
